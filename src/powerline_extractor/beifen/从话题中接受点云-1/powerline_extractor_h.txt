#ifndef POWERLINE_EXTRACTOR_H
#define POWERLINE_EXTRACTOR_H

#include <ros/ros.h>
#include <sensor_msgs/PointCloud2.h>
#include <matio.h>
#include <string>
#include <pcl/filters/voxel_grid.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/point_cloud.h>
#include <pcl/point_types.h>
#include <pcl_conversions/pcl_conversions.h>
#include <pcl/common/common.h>
#include <pcl/io/pcd_io.h>
#include <pcl/segmentation/extract_clusters.h>
#include <Eigen/Dense>
#include <tf2_ros/transform_listener.h>
#include <tf2_eigen/tf2_eigen.h>
#include <tf2_sensor_msgs/tf2_sensor_msgs.h>

class PowerlineExtractor {
public:
    PowerlineExtractor();
    ~PowerlineExtractor();
    void processAndPublishPowerlines();

private:
    // 回调函数
    void lidarCallback(const sensor_msgs::PointCloud2ConstPtr& cloud_msg);
    
    // 坐标转换
    bool transformPointCloud(const sensor_msgs::PointCloud2& input_cloud, 
                           sensor_msgs::PointCloud2& output_cloud,
                           const std::string& target_frame);
    
    // 加载.mat文件和基本处理
    void checkParameters();
    bool loadMatFile(const std::string& file_path);
    void doubleToPointCloud();
    void lidarMsgToPointCloud(const sensor_msgs::PointCloud2ConstPtr& cloud_msg);
    
    // 电力线提取相关方法
    void extractNonGroundPoints();
    void extractPowerlinePoints();
    void getPCA(const pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud, 
               pcl::PointCloud<pcl::PointXYZI>::Ptr& powerlinePoints);
    void clusterPowerlines(const pcl::PointCloud<pcl::PointXYZI>::Ptr& candidateCloud,
                pcl::PointCloud<pcl::PointXYZI>::Ptr& filteredCloud);
    
    // 其他工具方法
    void centerPointCloud(pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud);
    void downsamplePointCloud(const pcl::PointCloud<pcl::PointXYZI>::Ptr& input, 
                             pcl::PointCloud<pcl::PointXYZI>::Ptr& output);
    void adjustPointCloudOrigin(pcl::PointCloud<pcl::PointXYZI>::Ptr& cloud);

    // ROS相关
    ros::NodeHandle nh_;
    ros::Publisher original_cloud_pub_;
    ros::Publisher downsamole_cloud_pub_;
    ros::Publisher non_ground_pub_;
    ros::Publisher powerline_pub_;
    ros::Publisher clustered_powerline_pub_;
    ros::Subscriber lidar_sub_;
    
    // TF相关
    tf2_ros::Buffer tf_buffer_;
    tf2_ros::TransformListener tf_listener_;
    std::string target_frame_;
    
    // 数据源选择
    bool use_lidar_data_;
    bool new_lidar_data_available_;
    
    // 参数
    double scale_factor_;
    std::string mat_file_path_;
    double voxel_size_;
    double pca_radius_;
    double angle_threshold_;
    double linearity_threshold_;
    double cluster_tolerance_;
    int min_cluster_size_;
    int max_cluster_size_;
    
    // .mat文件数据
    double** point_cloud_data_;
    size_t num_points_;
    
    // 点云对象
    pcl::PointCloud<pcl::PointXYZI>::Ptr original_cloud_;
    pcl::PointCloud<pcl::PointXYZI>::Ptr downsampled_cloud;
    pcl::PointCloud<pcl::PointXYZI>::Ptr non_ground_cloud_;
    pcl::PointCloud<pcl::PointXYZI>::Ptr powerline_cloud_;
    pcl::PointCloud<pcl::PointXYZI>::Ptr clustered_powerline_cloud_;
    
    // 滤波器
    pcl::VoxelGrid<pcl::PointXYZI> down_size_filter_;
};

#endif // POWERLINE_EXTRACTOR_H